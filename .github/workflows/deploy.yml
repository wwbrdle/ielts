name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Build application
      run: npm run build
        
    - name: Create deployment package
      run: |
        tar -czf build.tar.gz build/
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "SSH key length: ${#ORACLE_SSH_KEY}"
        
        # SSH 키가 비어있는지 확인
        if [ -z "${{ secrets.ORACLE_SSH_KEY }}" ]; then
          echo "ERROR: ORACLE_SSH_KEY is empty!"
          exit 1
        fi
        
        # SSH 키 내용 확인 (처음과 끝 부분만)
        echo "SSH key starts with: $(echo "${{ secrets.ORACLE_SSH_KEY }}" | head -c 50)"
        echo "SSH key ends with: $(echo "${{ secrets.ORACLE_SSH_KEY }}" | tail -c 50)"
        
        echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # SSH 키 파일 내용 확인
        echo "SSH key file content (first 100 chars):"
        head -c 100 ~/.ssh/id_rsa
        
        ls -la ~/.ssh/
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        echo "Running ssh-keyscan..."
        ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts
        echo "SSH setup completed"
        
        # SSH 연결 테스트
        echo "Testing SSH connection..."
        ssh -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.ORACLE_USERNAME }}@${{ secrets.ORACLE_HOST }} "echo 'SSH connection successful'"
        echo "SSH test completed"
        
    - name: Copy files to server
      run: |
        scp -P ${{ secrets.ORACLE_PORT }} build.tar.gz ${{ secrets.ORACLE_USERNAME }}@${{ secrets.ORACLE_HOST }}:/tmp/
        
    - name: Extract and deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ORACLE_HOST }}
        username: ${{ secrets.ORACLE_USERNAME }}
        key: ${{ secrets.ORACLE_SSH_KEY }}
        port: ${{ secrets.ORACLE_PORT }}
        script: |
          # React 앱 배포
          echo "Deploying React app..."
          
          # 각 단계별 상세 로그
          echo "Step 1: Creating app directory..."
          sudo mkdir -p /var/www/ielts-app
          sudo chown -R opc:opc /var/www/ielts-app
          echo "Directory created: $(ls -la /var/www/ielts-app/)"
          
          # 앱 디렉토리로 이동
          cd /var/www/ielts-app
          echo "Current directory: $(pwd)"
          
          # 기존 파일 백업
          echo "Step 2: Backing up existing files..."
          sudo cp -r build build.backup.$(date +%Y%m%d_%H%M%S) || echo "No existing build to backup"
          
          # 새 빌드 파일 압축 해제
          echo "Step 3: Extracting new build files..."
          sudo rm -rf build
          sudo mkdir -p build
          echo "Build directory created: $(ls -la build/)"
          
          echo "Extracting build.tar.gz..."
          sudo tar -xzf /tmp/build.tar.gz -C /var/www/ielts-app/
          echo "Extraction completed. Build contents: $(ls -la build/)"
          sudo rm /tmp/build.tar.gz
          
          # 권한 설정
          echo "Step 4: Setting permissions..."
          sudo chown -R opc:opc /var/www/ielts-app/build
          sudo chmod -R 755 /var/www/ielts-app/build
          echo "Permissions set: $(ls -la build/)"
          
          # 웹서버 자동 실행
          echo "🚀 Starting web server automatically..."
          
          # 기존 웹서버 프로세스 종료
          echo "Stopping existing web server processes..."
          sudo pkill -f "python3 -m http.server" || echo "No existing processes to stop"
          sleep 2
          
          # 웹서버 시작
          echo "Starting new web server on port 8080..."
          cd /var/www/ielts-app
          
          # 백그라운드에서 웹서버 실행
          nohup python3 -m http.server 8080 --directory build > web_server.log 2>&1 &
          WEB_SERVER_PID=$!
          
          # 웹서버 시작 확인
          echo "Waiting for web server to start..."
          sleep 3
          
          # 프로세스 상태 확인
          if ps -p $WEB_SERVER_PID > /dev/null; then
            echo "✅ Web server started successfully with PID: $WEB_SERVER_PID"
            
            # 포트 리스닝 확인
            if netstat -tlnp 2>/dev/null | grep ":8080" > /dev/null; then
              echo "✅ Port 8080 is listening"
              echo "🌐 React app is now accessible at: http://$(curl -s ifconfig.me):8080"
            else
              echo "⚠️ Web server process is running but port 8080 is not listening yet"
              echo "Waiting a bit more..."
              sleep 2
              if netstat -tlnp 2>/dev/null | grep ":8080" > /dev/null; then
                echo "✅ Port 8080 is now listening"
                echo "🌐 React app is accessible at: http://$(curl -s ifconfig.me):8080"
              else
                echo "❌ Port 8080 is still not listening"
                echo "Web server log:"
                tail -10 web_server.log
              fi
            fi
          else
            echo "❌ Failed to start web server"
            echo "Web server log:"
            cat web_server.log
            echo "Process status:"
            ps aux | grep python3
            exit 1
          fi
          
          echo "🎉 React app deployed and web server started successfully!"
          echo "📁 Files are available at: /var/www/ielts-app/build"
          echo "🚀 Web server is running on port 8080"
          echo "🌐 Access your app at: http://$(curl -s ifconfig.me):8080"
