name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Build application
      run: npm run build
        
    - name: Create deployment package
      run: |
        tar -czf build.tar.gz build/
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "SSH key length: ${#ORACLE_SSH_KEY}"
        
        # SSH 키가 비어있는지 확인
        if [ -z "${{ secrets.ORACLE_SSH_KEY }}" ]; then
          echo "ERROR: ORACLE_SSH_KEY is empty!"
          exit 1
        fi
        
        # SSH 키 내용 확인 (처음과 끝 부분만)
        echo "SSH key starts with: $(echo "${{ secrets.ORACLE_SSH_KEY }}" | head -c 50)"
        echo "SSH key ends with: $(echo "${{ secrets.ORACLE_SSH_KEY }}" | tail -c 50)"
        
        echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # SSH 키 파일 내용 확인
        echo "SSH key file content (first 100 chars):"
        head -c 100 ~/.ssh/id_rsa
        
        ls -la ~/.ssh/
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        echo "Running ssh-keyscan..."
        ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts
        echo "SSH setup completed"
        
        echo "SSH setup completed - ready for deployment"
        
    - name: Copy files to server
      run: |
        scp -P ${{ secrets.ORACLE_PORT }} build.tar.gz ${{ secrets.ORACLE_USERNAME }}@${{ secrets.ORACLE_HOST }}:/tmp/
        
    - name: Extract and deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ORACLE_HOST }}
        username: ${{ secrets.ORACLE_USERNAME }}
        key: ${{ secrets.ORACLE_SSH_KEY }}
        port: ${{ secrets.ORACLE_PORT }}
        timeout: 60s
        command_timeout: 10m
        script: |
          # React 앱 배포
          echo "Deploying React app..."
          
          # 각 단계별 상세 로그
          echo "Step 1: Creating app directory..."
          sudo mkdir -p /var/www/ielts-app
          sudo chown -R opc:opc /var/www/ielts-app
          echo "Directory created: $(ls -la /var/www/ielts-app/)"
          
          # 앱 디렉토리로 이동
          cd /var/www/ielts-app
          echo "Current directory: $(pwd)"
          
          # 기존 파일 백업
          echo "Step 2: Backing up existing files..."
          sudo cp -r build build.backup.$(date +%Y%m%d_%H%M%S) || echo "No existing build to backup"
          
          # 새 빌드 파일 압축 해제
          echo "Step 3: Extracting new build files..."
          sudo rm -rf build
          sudo mkdir -p build
          echo "Build directory created: $(ls -la build/)"
          
          echo "Extracting build.tar.gz..."
          sudo tar -xzf /tmp/build.tar.gz -C /var/www/ielts-app/
          echo "Extraction completed. Build contents: $(ls -la build/)"
          sudo rm /tmp/build.tar.gz
          
          # 권한 설정
          echo "Step 4: Setting permissions..."
          sudo chown -R opc:opc /var/www/ielts-app/build
          sudo chmod -R 755 /var/www/ielts-app/build
          echo "Permissions set: $(ls -la build/)"
          
          echo "🎉 React app deployed successfully!"
          echo "📁 Files are available at: /var/www/ielts-app/build"
          echo "🚀 Ready to start web server in next step"
          
    - name: Setup and start web server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ORACLE_HOST }}
        username: ${{ secrets.ORACLE_USERNAME }}
        key: ${{ secrets.ORACLE_SSH_KEY }}
        port: ${{ secrets.ORACLE_PORT }}
        timeout: 20s
        command_timeout: 1m
        script: |
          echo "🚀 Setting up web server service..."
          echo "Step 1: Checking current directory and permissions..."
          pwd
          ls -la /var/www/ielts-app/
          
          echo "Step 2: Stopping existing web server service if running..."
          sudo systemctl stop ielts-app || true
          echo "Service stop completed (ignored if not running)"
          
          echo "Step 3: Creating systemd service file..."
          sudo bash -c 'cat > /etc/systemd/system/ielts-app.service << EOF
          [Unit]
          Description=IELTS App Web Server
          After=network.target
          
          [Service]
          Type=simple
          User=opc
          WorkingDirectory=/var/www/ielts-app
          ExecStart=/usr/bin/python3 -m http.server 8080 --directory build
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          EOF'
          
          echo "Step 4: Reloading systemd daemon..."
          sudo systemctl daemon-reload
          
          echo "Step 5: Enabling and starting service..."
          sudo systemctl enable ielts-app
          sudo systemctl restart ielts-app
          
          echo "Step 6: Checking service status..."
          systemctl status ielts-app --no-pager -l || true
          sudo ss -tlnp | grep :8080 || echo "Port 8080 not listening"
          
          if sudo systemctl is-active --quiet ielts-app; then
            echo "✅ SUCCESS: Web server service is running!"
            echo "🌐 React app accessible at: http://$(curl -s ifconfig.me):8080"
          else
            echo "❌ FAILED: Service is not running"
            sudo journalctl -u ielts-app --no-pager -l | tail -10
          fi
