name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Build application
      run: npm run build
        
    - name: Create deployment package
      run: |
        tar -czf build.tar.gz build/
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "SSH key length: ${#ORACLE_SSH_KEY}"
        
        # SSH 키가 비어있는지 확인
        if [ -z "${{ secrets.ORACLE_SSH_KEY }}" ]; then
          echo "ERROR: ORACLE_SSH_KEY is empty!"
          exit 1
        fi
        
        # SSH 키 내용 확인 (처음과 끝 부분만)
        echo "SSH key starts with: $(echo "${{ secrets.ORACLE_SSH_KEY }}" | head -c 50)"
        echo "SSH key ends with: $(echo "${{ secrets.ORACLE_SSH_KEY }}" | tail -c 50)"
        
        echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # SSH 키 파일 내용 확인
        echo "SSH key file content (first 100 chars):"
        head -c 100 ~/.ssh/id_rsa
        
        ls -la ~/.ssh/
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        echo "Running ssh-keyscan..."
        ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts
        echo "SSH setup completed"
        
        # SSH 연결 테스트
        echo "Testing SSH connection..."
        ssh -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.ORACLE_USERNAME }}@${{ secrets.ORACLE_HOST }} "echo 'SSH connection successful'"
        echo "SSH test completed"
        
    - name: Copy files to server
      run: |
        scp -P ${{ secrets.ORACLE_PORT }} build.tar.gz ${{ secrets.ORACLE_USERNAME }}@${{ secrets.ORACLE_HOST }}:/tmp/
        
    - name: Extract and deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ORACLE_HOST }}
        username: ${{ secrets.ORACLE_USERNAME }}
        key: ${{ secrets.ORACLE_SSH_KEY }}
        port: ${{ secrets.ORACLE_PORT }}
        script: |
          # 서버 초기 설정
          echo "Setting up server environment..."
          
          # 필요한 디렉토리 생성
          sudo mkdir -p /var/www/ielts-app
          sudo chown -R $USER:$USER /var/www/ielts-app
          
          # Nginx 설치 확인 및 설치
          if ! command -v nginx &> /dev/null; then
            echo "Installing Nginx..."
            sudo apt update
            sudo apt install -y nginx
            sudo systemctl enable nginx
          fi
          
          # www-data 사용자 확인 및 생성
          if ! id "www-data" &>/dev/null; then
            echo "Creating www-data user..."
            sudo useradd -r -s /bin/false www-data
          fi
          
          # 앱 디렉토리로 이동
          cd /var/www/ielts-app
          
          # 기존 파일 백업
          sudo cp -r build build.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # 새 빌드 파일 압축 해제
          sudo rm -rf build
          sudo mkdir -p build
          sudo tar -xzf /tmp/build.tar.gz -C /var/www/ielts-app/
          sudo rm /tmp/build.tar.gz
          
          # 권한 설정
          sudo chown -R www-data:www-data /var/www/ielts-app/build
          sudo chmod -R 755 /var/www/ielts-app/build
          
          # Nginx 설정 파일 생성
          sudo tee /etc/nginx/sites-available/ielts-app > /dev/null <<EOF
          server {
              listen 80;
              server_name _;
              
              root /var/www/ielts-app/build;
              index index.html;
              
              location / {
                  try_files \$uri \$uri/ /index.html;
              }
          }
          EOF
          
          # Nginx 사이트 활성화
          sudo ln -sf /etc/nginx/sites-available/ielts-app /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Nginx 설정 테스트 및 재시작
          sudo nginx -t
          sudo systemctl restart nginx
          
          echo "Deployment completed successfully!"
